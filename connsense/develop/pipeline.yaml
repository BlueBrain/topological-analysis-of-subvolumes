description: >-
  Configure a `connsense` pipeline
version: 2.0.0
date: 20220720
paths:
  description: >-
    The ~connsense~ pipeline needs paths to the input data to load from, and output paths to store data.
    Paths to the circuit must be provided along with paths to the HDF5 archive that will store the pipeline's
    results.
  format: relative
  circuit:
    root: "/gpfs/bbp.cscs.ch/project/proj83/circuits"
    files:
      Bio_M: "Bio_M/20200805/CircuitConfig_TC_WM"
  pipeline:
    root: "/gpfs/bbp.cscs.ch/project/proj83/home/sood/portal/develop/factology-v2/analyses/connsense/"
    input:
      store: "connsense.h5"
    output:
      store: "connsense.h5"
    steps:
      define-subtargets: "subtargets"
      extract-voxels: "atlas"
      
      extract-node-populations: "nodes/populations"
      evaluate-subtargets: "subtarget_quality"
      extract-edge-types: "edges/types"
      extract-edge-populations: "edges/populations"
      randomize-connectivity: "edges/randomizations"
      analyze-composition: "analysis/composition"
      analyze-connectivity: "analyses"
parameters:
  define-subtargets:
    description: >-
      Configure how subtargets are defined.
    definitions:
      hexgrid-cells:
        description: >-
           A hexagonal grid in the circuit's flatmap space (a.k.a flatspace),
           using methods provided in connsense/flatmap_utility.
           Cell positions will be distributed among the hexagonal subtargets, in a grid generated with
           the configured parameters.
        node_population: "default"
        shape: hexgrid
        parameters:
        origin: [0.0, 0.0, 0.0]
        radius: 230.0
        base_target: "Mosaic"
      hexgrid-voxels:
        description: >-
          A hexagonal grid in the circuit's flatmap space (a.k.a flatspace),
          using an NRRD file that maps each voxel to the subtarget it belongs in.
          In addition to the NRRD file, a file providing subtarget info is also required.
        node_population: "default"
        nrrd: "/gpfs/bbp.cscs.ch/project/proj83/home/reimann/subvolumes/column_identities.nrrd"
        info: "/gpfs/bbp.cscs.ch/project/proj83/home/reimann/subvolumes/voxel-based-hex-grid-info.h5"
      pre-defined-columns:
        description: >-
          The pre-defined subtargets' node-ids  must be available in the circuit's data.
          The entries should be of the form `<group>/<member>` such that the entry can be used the subtarget's
          NRRD mask from `circuit.atlas`. Subtargets will be defined using a `connsense` method that uses `bluepy`
          to extract each subtarget's GIDs from the circuit.
        node_population: "default"
        subtargets:
          - "central_columns/S1DZO_Column"
          - "central_columns/S1DZ_Column"
          - "central_columns/S1FL_Column"
          - "central_columns/S1HL_Column"
          - "central_columns/S1J_Column"
          - "central_columns/S1Sh_Column"
          - "central_columns/S1Tr_Column"
          - "central_columns/S1ULp_Column"
      pre-defined-regions:
        description: >-
          The pre-defined subtargets' node-ids  must be available in the circuit's data.
          The entries should be of the form `<group>/<member>` such that the entry can be used the subtarget's
          NRRD mask from `circuit.atlas`. Subtargets will be defined using a `connsense` method that uses `bluepy`
          to extract each subtarget's GIDs from the circuit.
        node_population: "default"
        subtargets:
          - "regions/S1DZO_Column"
          - "regions/S1DZ_Column"
          - "regions/S1FL_Column"
          - "regions/S1HL_Column"
          - "regions/S1J_Column"
          - "regions/S1Sh_Column"
          - "regions/S1Tr_Column"
          - "regions/S1ULp_Column"
  
  extract-voxels:
    description: >-
      Configure the extraction of atlas data for each circuit subtarget.
    annotations:
      layer:
        description: >-
          Extract a `pandas.Series` indexed by voxel indices, valued by the layers of each voxel.
        extractor:
          source: connsense.extract_voxels.bluepy
          method: locate_layers
      depth:
        description: >-
          Extract a `pandas.Series` indexed by voxel indices, valued by the position of each voxel.
        extractor:
          source: connsense.extract_voxels.bluepy
          method: get_voxel_depths
      flatmap:
        description: >-
          Flatmap position of each voxel: flat_x, flat_y, and depth.
        extractor:
          source: connsense.extract_voxels.flatmap
          method: locate_flatmap_coordinates
      orientation:
        description: >-
          Extract the orientations as a pandas.DataFrame indexed by voxel indices, columned the (x, y, z) coordinates
          of the voxel's principal-axis along the layers.
        extractor:
          source: connsense.extract_voxels.bluepy
          method: orient_voxels
  extract-node-types:
    description: >-
      Extract node-type data
    models:
      biophysical:
        description: >-
          The biophysical nodes...
        morphology:
          node_property: "morphology"
          extractor:
            source: connsense.extract_node_types.morphologies
            method: measure_morphologies
          properties:
            - "axon_length"
            - "axon_volume"
            - "branch-order"
            - "complete this list."
        electrophysiology:
          node_property: "memodel"
          extractor:
            source: connsense.extract_node_types.electrophysiologies
            method: measure_electrophysiology
          properties:
            - "thimk-of-some"
            - 'properties to extract'
  extract-node-populations:
    description: >-
      Specify the populations to extract from a circuit.
    populations:
      default:
        description: >-
          The default population will be that of neurons in the SSCx.
          To extract the neurons we will use a `connsense` method that uses ~bluepy~.
        extractor:
          source: connsense
          method: bluepy
        properties:
          - region
          - layer
          - x
          - y
          - z
          - depth
          - synapse_class
          - mtype
          - etype
          - morphology
  extract-edge-populations:
    description: >-
      Specify the connectomes to extract from.
      Connections will be extracted for each subtarget as an adjacency matrix, with or without connection-strengths.
      A connection is between a pair of source and target nodes, and may be a multi-edge connection.
      We will also specify a set of edge-properties to extract from the circuit.
    populations:
      local:
        source_node_population: "default"
        target_node_population: "default"
        connectome: "local"
        extractor:
          source: connsense.extract_connectivity.bluepy
          method: extract_connectivity
        properties:
          - "type"
          - "g_synx"
          - "u_syn"
          - "d_syn"
          - "f_syn"
          - "axonal_delay"
          - "dtc"
          - "nrrp"
          - "touch_distance"
          - "conductance_ratio"
          - "u_hill_coefficient"
      long-range:
        source_node_population: "default"
        target_node_population: "default"
        connectome: "intra_SSCX_midrange_wm"
        extractor:
          source: connsense.extract_connectivity.bluepy
          method: extract_connectivity
        properties:
          - "type"
          - "g_synx"
          - "u_syn"
          - "d_syn"
          - "f_syn"
          - "axonal_delay"
          - "dtc"
          - "nrrp"
          - "touch_distance"
          - "conductance_ratio"
          - "u_hill_coefficient"
      cortico-cortical:
        source_node_population: "default"
        target_node_population: "default"
        connectome: ["local", "intra_SSCX_midrange_wm"]
        extractor:
          source: connsense.extract_connectivity.bluepy
          method: extract_connectivity
        properties:
          - "type"
          - "g_synx"
          - "u_syn"
          - "d_syn"
          - "f_syn"
          - "axonal_delay"
          - "dtc"
          - "nrrp"
          - "touch_distance"
          - "conductance_ratio"
          - "u_hill_coefficient"
      thalamic-vpm:
        source_node_population: null
        target_node_population: "default"
        connectome: "Thalamocortical_input_VPM"
        extractor:
          source: connsense.extract_connectivity.bluepy
          method: extract_connectivity
        properties:
          - "type"
          - "g_synx"
          - "u_syn"
          - "d_syn"
          - "f_syn"
          - "axonal_delay"
          - "dtc"
          - "nrrp"
          - "touch_distance"
          - "conductance_ratio"
          - "u_hill_coefficient"
      thalamic-pom:
        source_node_population: null
        target_node_population: "default"
        connectome: "Thalamocortical_input_POM"
        extractor:
          source: connsense.extract_connectivity.bluepy
          method: extract_connectivity
        properties:
          - "type"
          - "g_synx"
          - "u_syn"
          - "d_syn"
          - "f_syn"
          - "axonal_delay"
          - "dtc"
          - "nrrp"
          - "touch_distance"
          - "conductance_ratio"
          - "u_hill_coefficient"
  analyze-geometry:
    description: >-
      Analyxe the circuit subtarget's geometry.
    analyses:
      layer_volumes:
          description: >-
            Analyze circuit subtarget volume of each layer. Total volume can be computed as their sum.
          source: connsense.analyze_geometry
          method: measure_volume
          output: "pandas.Series"
      conicity:
          description: >-
            How conical is a circuit subtarget? This analysis makes sense for /flatmap/ subtargets,
            but could be computed for any columnar subtarget. The inputs to the analysis will the subtarget's mask
            orientations, and flatmap.
          source: connsense.analyze_geometry
          method: measure_conicity
          output: "pandas.DataFrame"
  analyze-composition:
    description: >-
      Analyze the cellular and synaptic composition of a circuit subtarget.
    analyses:
      cell-counts-by-layer:
          description: >-
            Number of cells in each layer of the circuit.
          source: connsense.analyze_composition.bluepy
          method: cell_density_by_layer
          output: pandas.DataFrame
  analyze-connectivity:
    description:
      Configure each analyses' parameters, as a mapping under section `analyses`.
    analyses:
      neuronal-convergence:
        description:
          Compute neuronal convergence in a circuit for each mtype--> mtype pathway among edges in the local population.
        edge_population: "local"
        computation:
          args: ["adjacency_matrix", "node_properties"]
          source: "sscx_dissemination.v2.circuit.factology.helper.connsense.connectivity"
          method: "get_neuronal_convergence"
          output: "pandas.DataFrame"
      neuronal-divergence:
        description:
          Compute neuronal convergence in a circuit for each mtype--> mtype pathway among edges in the local population.
        edge_population: "local"
        computation:
          args: ["adjacency_matrix", "node_properties"]
          source: "sscx_dissemination.v2.circuit.factology.helper.connsense.connectivity"
          method: "get_neuronal_divergence"
          output: "pandas.DataFrame"
      synaptic-convergence:
        description:
          Compute synaptic convergence in a circuit for each mtype--> mtype pathway among edges in the local population.
        edge_population: "local"
        computation:
          args: ["adjacency_matrix", "node_properties", "edge_properties"]
          source: "sscx_dissemination.v2.circuit.factology.helper.connsense.connectivity"
          method: "get_synaptic_convergence"
          output: "pandas.DataFrame"
      synaptic-divergence:
        description:
          Compute synaptic convergence in a circuit for each mtype--> mtype pathway among edges in the local population.
        edge_population: "local"
        computation:
          args: ["adjacency_matrix", "node_properties", "edge_properties"]
          source: "sscx_dissemination.v2.circuit.factology.helper.connsense.connectivity"
          method: "get_synaptic_divergence"
          output: "pandas.DataFrame"
