{
  "VERSION": "1.0.0",
  "COMMENTS": [
    "As we have worked on the Topological Analysis Pipeline (TAP),\n",
    "we have learnt several lessons, and have updated the configuration.",
    "This file represents a major update in which we focus on parallelization."
  ],
  "paths": {
      "format": "relative",
    "circuit": {
        "root": "/gpfs/bbp.cscs.ch/project/proj83/circuits",
        "files": {
            "Bio_M": "Bio_M/20200805/CircuitConfig_TC_WM"
        }
    },
    "pipeline": {
      "root": "/gpfs/bbp.cscs.ch/project/proj83/home/sood/analyses/manuscript/topological-analysis-subvolumes/test/bedge-counts",
      "input": {
        "store": "topological_sampling.h5",
        "steps": "all"
      },
      "output": {
        "store": "topological_sampling_out.h5",
        "steps": "analyze-connectivity"
      },
      "steps": {
        "define-subtargets": "subtargets",
        "extract-neurons": "neurons",
        "evaluate-subtargets": "subtarget_quality",
        "extract-connectivity": "con_mats/original",
        "randomize-connectivity": "con_mats/randomized",
        "analyze-connectivity": "analysis"
      }
    }
  },
  "parameters": {
    "define-subtargets": {
      "common": {
        "COMMENT": ["Subtargets are grouped by their defnition provided in the next section.",
                    "Any common parameters may be provided here."]
      },
      "grids": {
        "hexgrid": {
          "radius": 230.0,
          "base_target": "Mosaic"
        }
      }
    },
    "extract-neurons": {
      "common": {
        "COMMENT": ["It is assumed that the pipeline will need a set of cell properties",
                    "with names that can be used to query the circuit for their values",
                    "in a population of cells.",
                    "A dict mapping cell-property to a neuron extraction criterion ",
                    "can be used to filter the extracted neurons.",
                    "If there  are any common parameters to use for extraction, ",
                    "they can be provided here."],
        "filter": {}
      },
      "properties": [
        "x",
        "y",
        "z",
        "depth",
        "synapse_class",
        "region",
        "layer",
        "mtype"
      ]
    },
    "evaluate-subtargets": {
      "common": {
        "COMMENT": ["It is assumed that a metric can be defined by a simple name.",
                   "Hence we can simply list metric names, ",
                   "instead of using a dict.",
                   "We can replace the list metrics below by a dict if, for example,",
                   "we filter the subtargets following their evaluation.",
                   "Filtering parameters could have individual parameters",
                    " in addition to common ones to be entered in this section."]
      },
      "metrics": [
        "orthogonality",
        "neuron_counts",
        "target_composition"
      ]
    },
    "extract-connectivity": {
      "common" : {
        "COMMENT": ["It is assumed that while there may be more than one connectome",
                    "extraction of these need only common parameters if any.",
                    "If this assumption is validated in a use-case, ",
                    "we can replace next section's list by a dict."]
      },
      "connectomes": [
        [
          "local"
        ]
      ]
    },
    "randomize-connectivity":{
      "common": {
        "COMMENT": ["Notice that random controls are modeled in the pipeline separately from ",
                    "the `randomize-connecitivity`"]
      }
    },
    "control-connectivity": {
      "common": {
        "COMMENT": ["Control connectivity for topological analysis of circuit subvolumes\n",
                    "Provide parameters for individual analyses in the next section.",
                    "In this section, provide parameters commmon to all the analyses."]
      },
      "algorithms": {
        "COMMENT": ["For each algorithm provide keyword argument `sampling`for how to sample.",
                    "The `sampling` value can be an integer to indicate the number of samples to make,",
                    "or a list of integers that will be used as random seeds for sampling."],
        "erdos-renyi": {
          "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/randomization.py",
          "method": "ER_shuffle",
          "samples": [0, 1, 2, 3, 4, 5],
          "kwargs": {}
        }
      }
    },
    "analyze-connectivity": {
      "common": {
        "COMMENT": ["Provide parameters for individual analyses in the next section.",
                    "In this section provide parameters common to all the analysis."]
      },
      "analyses": {
        "simplex-counts": {
	        "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/topology.py",
          "method": "simplex_counts",
          "controls": ["erdos-renyi"],
          "output": "pandas.Series"
        }
        "simplices": {
	        "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/topology.py",
          "method": "list_simplices_by_dimension",
          "output": "SeriesOfMatrices"
        },
        "node-participation": {
	        "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/topology.py",
          "method": "node_participation",
          "kwargs": {},
          "output": "pandas.DataFrame"
        },
	      "betti-counts": {
	        "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/topology.py",
          "method": "betti_counts",
          "kwargs": {
	          "approximation": [-1, -1, 10000, 10000, 100000, 100000, -1, -1]
          },
          "output": "pandas.Series"
        },
	      "bedge-counts": {
	        "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/topology.py",
          "method": "bedge_counts",
          "output": "SeriesOfMatrices"
        }
      }
    }
  }
}
