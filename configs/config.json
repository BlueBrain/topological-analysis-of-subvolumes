{
  "VERSION": "1.0.0",
  "DATE": "20220405",
  "COMMENTS": [
    "As we have worked on the Topological Analysis Pipeline (TAP)",
    "we have learnt several lessons, and have updated the configuration.",
    "This file represents the current requirements to configure a pipeline run."
  ],
  "paths": {
    "COMMENTS": [
      "TAP needs paths to the input data to load from, output paths to store data in.",
      "The circuit is an input for the steps of definiing subvolumes and extracting connectivity and nodes",
      "The output data is stored in a single HDF archive, and the paths should mention its root and groups.",
      "To run TAP incrementally, for example to run a specific analysis from the CLI",
      " it will be assumed that the output of the previous steps (upto and including exctraction of connectivity)",
      " is available in the input-store.",
      "Thus we allow to configure an input-store as well."
    ],
    "format": "relative",
    "circuit": {
        "root": "/gpfs/bbp.cscs.ch/project/proj83/circuits",
        "files": {
            "Bio_M": "Bio_M/20200805/CircuitConfig_TC_WM"
        }
    },
    "pipeline": {
      "COMMENTS": [
        "Provide the HDF stores for input (i.e output by previous TAP steps), and an ouput pipeline data",
        "The paths should be entered with a directory as root and the name of the HDF5 file as store."
      ],
      "root": "/gpfs/bbp.cscs.ch/project/proj83/home/sood/topological-analysis-subvolumes/test/simplex-counts",
      "steps": {
        "COMMENTS": [
          "These are the pipeline steps that can be configured.",
          "The names appearing as values will be used to name the relevant analysis groups in HDF-store."
        ],
        "define-subtargets": "subtargets",
        "extract-neurons": "neurons",
        "evaluate-subtargets": "subtarget_quality",
        "extract-connectivity": "con_mats/original",
        "randomize-connectivity": "con_mats/randomized",
        "analyze-connectivity": "analysis"
      },
      "input": {
        "COMMENTS": [
          "Provide the name of the input store."
        ],
        "store": "topological_sampling.h5"
      },
      "output": {
        "store": "topological_sampling.h5"
      }
    }
  },
  "parameters": {
    "define-subtargets": {
      "COMMENT": [
        "Conventions to define a subtarget are still evolving.\n",
        "Subtargets cannot be only connsense defined, and we keep exploring conventions to allow several."
      ],
      "definitions": {
        "hexgrid-cells": {
          "COMMENT": [
            "A hexagonal grid in the circuit's flatmap space (a.k.a. flatspace), ",
            "using methods provided in `connsense/flatmap_utility\n",
            "Cell positions should be directly distributed among the hexagonal (flatspace-) subtargets\n",
            "with the specs provided as `parameters` below."
          ],
          "shape": "hexgrid",
          "parameters": {
            "origin": [0.0, 0.0],
            "radius": 230.0,
            "base_target": "Mosaic"
          }
        },
        "hexgrid-voxels": {
          "COMMENT": [
            "A hexagonal grid in the circuit's flatmap space, using an NRRD file and a metadata / info file.\n",
            "For each voxel, the NRRD should contain an integer ID that refers to the subtarget that the voxel\n",
            "is mapped to. The ID's should be mapped to the subtargets they refer to in a dataframe provided as \n",
            "`info`."
          ],
          "nrrd": "/gpfs/bbp.cscs.ch/project/proj83/home/reimann/subvolumes/column_identities.nrrd",
          "info":  "/gpfs/bbp.cscs.ch/project/proj83/home/reimann/subvolumes/voxel-based-hex-grid-info.h5"
        },
        "central-columns": {
          "COMMENT": [
            "A column along the layers in each of the SSCx's 8 subregions that have been reconstructed.\n",
            "Each column's cells are present as a circuit cell-target and will be loaded to define the subtarget"
          ],
          "group": "central_columns",
          "members": [
            "S1DZO_Column",
            "S1DZ_Column",
            "S1FL_Column",
            "S1HL_Column",
            "S1J_Column",
            "S1Sh_Column",
            "S1Tr_Column",
            "S1ULp_Column"
          ]
        }
      }
    },
    "extract-neurons": {
      "common": {
        "COMMENT": [
          "It is assumed that the pipeline will need a set of cell properties",
          "with names that can be used to query the circuit for their values",
          "in a population of cells.",
          "A dict mapping cell-property to a neuron extraction criterion ",
          "can be used to filter the extracted neurons.",
          "If there  are any common parameters to use for extraction, ",
          "they can be provided here."
        ],
        "filter": {}
      },
      "properties": [
        "x",
        "y",
        "z",
        "depth",
        "synapse_class",
        "region",
        "layer",
        "mtype"
      ]
    },
    "evaluate-subtargets": {
      "common": {
        "COMMENT": [
          "It is assumed that a metric can be defined by a simple name.",
          "Hence we can simply list metric names, ",
          "instead of using a dict.",
          "We can replace the list metrics below by a dict if, for example,",
          "we filter the subtargets following their evaluation.",
          "Filtering parameters could have individual parameters",
          " in addition to common ones to be entered in this section."
        ]
      },
      "metrics": [
        "orthogonality",
        "neuron_counts",
        "target_composition"
      ]
    },
    "extract-connectivity": {
      "common" : {
        "COMMENT": [
          "It is assumed that while there may be more than one connectome",
          "extraction of these need only common parameters if any.",
          "If this assumption is validated in a use-case, ",
          "we can replace next section's list by a dict."
        ]
      },
      "connectomes": [
        "local"
      ]
    },
    "connectivity-controls": {
      "common": {
        "COMMENT": [
					"Provide parameters for individual analyses in the next section.",
          "In this section provide parameters commmon to all the analyses."
				]
      },
      "algorithms": {
        "COMMENT": [
					"For each algorithm provide keyword argument `sampling`for how to sample.",
          "The `sampling` value can be an integer to indicate the number of samples to make,",
          "or a list of integers that will be used as random seeds for sampling."
				],
        "erdos-renyi": {
          "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/randomization.py",
          "method": "ER_shuffle",
          "seeds": [0, 1, 2, 3, 4]
        },
        "dd2-model": {
          "COMMENT": ["The kwarg coord_names should match the coord_names in analysis model_params_dd2 among analyze-connectivity entries"],
          "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/randomization.py",
          "method": "run_DD2_model",
          "kwargs": {
            "coord_names": ["x", "y", "z"]
          },
          "seeds": [0, 1, 2, 3, 4]
        }
      }
    },
    "randomize-connectivity": {
      "COMMENT": [
        "Configure the subtargets to save their randomized connectivity in the TAP store.",
        "The default entry will be used unless overriden by an entry for a specific randomization",
        "configured as a connectivity-controls algorithm."
      ],
      "controls": {
        "dd2-model": {
          "subtargets": [
						{"nmin": 1000, "nmax": 5000, "subtargets": 5},
          	{"nmin": 10000, "nmax": 15000, "subtargets": 10},
          	{"nmin": 20000, "nmax": 25000, "subtargets": 5},
          	{"nmin": 30000, "nmax": 50000, "subtargets": 5}
					]
        },
        "erdos-renyi": {
					"subtargets": [
						{"nmin": 1000, "nmax": 5000, "subtargets": 5},
          	{"nmin": 10000, "nmax": 15000, "subtargets": 10},
          	{"nmin": 20000, "nmax": 25000, "subtargets": 5},
          	{"nmin": 30000, "nmax": 50000, "subtargets": 5}
					]
				}
      }
    },
    "analyze-connectivity": {
      "common": {
        "COMMENT": [
					"Provide parameters for individual analyses in the next section.",
          "In this section provide parameters common to all the analysis."
				]
      },
      "analyses": {
        "degree": {
         "COMMENT": ["Count the number of incoming connections of a node."],
          "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/topology.py",
          "method": "node_degree",
          "kwargs": {
            "direction": ["IN", "OUT"]
          },
          "controls-to-apply": ["dd2-model"],
          "output": "pandas.DataFrame"
        },
        "simplex-counts": {
	        "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/topology.py",
          "method": "simplex_counts",
	        "controls-to-apply": ["erdos-renyi", "dd2-model"],
          "output": "pandas.Series"
        },
        "simplices": {
	        "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/topology.py",
          "method": "list_simplices_by_dimension",
          "output": "SeriesOfMatrices"
        },
        "node-participation": {
	        "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/topology.py",
          "method": "node_participation",
          "kwargs": {},
          "output": "pandas.DataFrame"
        },
			  "betti-counts": {
	        "source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/topology.py",
          "method": "betti_counts",
          "kwargs": {
            "min_dim": 0,
            "max_dim": 7,
            "coeff": 2, 
	          "approximation": [-1, 10000, 10000, 100000, 100000, 10000, -1, -1]
          },
          "output": "pandas.Series"
        },
				"bedge-counts": {
					"source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/topology.py",
					"method": "bedge_counts",
					"output": "SeriesOfMatrices"
				},
				"model_params_dd2": {
					"COMMENTS": [
						"This analysis is used to create model parameters for the distance dependent connection-probabilty order 2 control  model",
						"Note the `coord_names` `kwarg` configured in the following must agree with the configuration of the control model",
						" called `dd2-model` in the `connectivity-controls` parameters. Please keep the two entries in agreement"
					],
					"source": "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/modelling.py",
					"method": "conn_prob_2nd_order_model",
					"output": "pandas.DataFrame",
					"kwargs": {
						"bin_size_um": 50,
						"max_range_um": 1000,
						"sample_size": null,
						"coord_names": ["x", "y", "z"]
					}
				}
    	}
  	}
	}
}
