description: >-
  Configure a connsense subTarget Analysis Pipeline to analyze your circuit.
version: 0.0.0
date: <2022-10-04 Tue>

paths:
  description: >-
    The ~connsense~ pipeline needs paths to the input data to load from, and output paths to store data.
    Paths to the circuit must be provided along with paths to the HDF5 archive that will store the pipeline's
    results.
  format: relative
  circuit:
    root: "/gpfs/bbp.cscs.ch/project/proj83/circuits"
    files:
      Bio_M: "Bio_M/20200805/CircuitConfig_TC_WM"
  pipeline:
    root: "/gpfs/bbp.cscs.ch/project/proj83/home/sood/topological-analysis-subvolumes/test/v2"
    input:
      store: "connsense.h5"
    output:
      store: "connsense.h5"
    steps:
      define-subtargets: "subtargets"
      extract-node-populations: "nodes/populations"
      extract-edge-populations: "edges/populations"
      analyze-connectivity: "analyses/connectivity"


parameters:
  create-index:
    description:
      Create tap-store indices by listing datasets for each index variable.
    variables:
      circuit:
        - "Bio_M"
      connectome:
        - "local"
      subtarget:
        dataset: ["define-subtargets", "flatmap-columns/name"]


  define-subtargets:
    description: >-
        Configure how subtargets are defined.
    definitions:
      flatmap-columns:
        description: >-
          Hexaongal prism like columns oriented along cortical layers, from white-matter to pia.
          The data is loaded from an NRRD file that maps each circuit voxel to a subtarget ids
          corresponding to a flatmap column.The subtarget ids should be mapped to the subtargets
          they refer to in a dataframe provided as the input `info`.
        input:
          circuit:
          - "Bio_M"
        kwargs:
          path: "/gpfs/bbp.cscs.ch/project/proj83/home/reimann/subvolumes/column_identities.nrrd"
          info: "/gpfs/bbp.cscs.ch/project/proj83/home/reimann/subvolumes/voxel-based-hex-grid-info.h5"
        loader:
          source: connsense.define_subtargets.flatmap
          method: load_nrrd
  

  extract-node-populations:
    description: >-
        Specify the populations to extract from a circuit.
    populations:
      default:
        description: >-
          The default population will be that of neurons in the SSCx.
          To extract the neurons we will use a `connsense` method that uses ~bluepy~.
        input:
          subtarget:
            dataset:  ["define-subtargets", "flatmap-columns"]
            circuit:
              - "Bio_M"
        kwargs:
          properties:
            - region
            - layer
            - x
            - y
            - z
            - depth
            - synapse_class
            - mtype
            - etype
            - morphology
        extractor:
          source: connsense.extract_nodes.bluepy
          method: extract_node_properties
        output: "pandas.DataFrame"

  extract-edge-populations:
    description: >-
      Specify the connectomes to extract from.
      Connections will be extracted for each subtarget as an adjacency matrix, with or without connection-strengths.
      A connection is between a pair of source and target nodes, and may be a multi-edge connection.
      We will also specify a set of edge-properties to extract from the circuit.
    populations:
      local:
        input:
          subtarget:
            dataset:  ["define-subtargets", "flatmap-columns"]
            circuit:
              - "Bio_M"
            connectome:
              - "local"
        kwargs:
          sources: "intrinsic"
        extractor:
          source: connsense.extract_connectivity.bluepy
          method: extract_adj
        output: "sparse.spmatrix"

  analyze-connectivity:
    description: >-
      Configure each analyses' parameters, as a mapping under section `analyses`.
    analyses:
      simplex-counts:
        description: >-
          Number of simplices by dimension.
      
        index:
          subtarget:
            dataset: ["define-subtargets", "flatmap-columns"]
          circuit:
            - "Bio_M"
          connectome:
            - "local"
      
        input:
          adjacency:
            dataset: ["extract-edge-populations", "local"]
      
        computation:
          source: "/gpfs/bbp.cscs.ch/project/proj83/analyses/topological-analysis-subvolumes/proj83/connectome_analysis/library/topology.py"
          method: "simplex_counts"
      
        output: "pandas.Series"
