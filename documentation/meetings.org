#+PROPERTY: header-args:jupyter :session  ~/Library/Jupyter/runtime/active-ssh-1.json :pandoc t
#+PROPERTY: header-args:jupyter-python :session ~/Library/Jupyter/runtime/active-ssh-1.json :pandoc t
#+STARTUP: overview

#+title: Meetings with the Topologists

We are building ~connsense-TAP~ to topological analyses of circuit subvolumes.

* <2022-10-04 Tue>
*** Thu Oct 13 10:36:27 2022
I felt that it is possible to motivate a problem-domain-specific schema can be developed. But we have to find the right balance between parts of the configuration that go into the ~pipeline-config~ file and those that go into the ~methods~ that execute pipeline computations. Above all, the ~pipeline-config~ file should tell a story about what the scientist wants.

* <2022-10-25 Tue>
Slicing and controls should be separate entries for an analysis.

* A command line tutorial

Let us prepare an extract of the full pipeline at
#+begin_src shell
pushd /gpfs/bbp.cscs.ch/project/proj83/home/sood/topological-analysis-subvolumes/test/v2/extract-2
#+end_src

What we will do in this tutorial is to load the ~connsense.h5~ from the main pipeline, extract subtargets that are small, and write them to the extracted ~connsense.h5~ in the location above.


In our discussion we will develop scientific concepts to measure the circuit, and implement Python functions to compute them. Here we setup a notebook template to test and explore, and the structure of a ~Python~ package for our methods.

Let us setup an interactive ~Python~ session where we can run the code developed here.

#+begin_src jupyter
from pathlib import Path
print("Welcome to EMACS Jupyter in %s"%(Path.cwd()))
#+end_src

#+RESULTS:
: Welcome to EMACS Jupyter in /gpfs/bbp.cscs.ch/home/sood/work/workspaces

** Introduction

Let us initialize the notebook with some general-purpose packages that we may need for things like plotting and loading a circuit. We will discuss ~connsense packages~ in the next section.

#+name: notebook-init
#+begin_src jupyter-python
# %% [markdown]
"""# Parallelization scheme for `connsense-TAP`

We develop a parallelization scheme for `connsense-TAP` computations.

"""
# %% [code]

from importlib import reload
from collections.abc import Mapping
from collections import OrderedDict
from pprint import pprint, pformat
from pathlib import Path

import numpy as np
import pandas as pd

import matplotlib

reload(matplotlib)
from matplotlib import pylab as plt
import seaborn as sbn
GOLDEN = (1. + np.sqrt(5.))/2.

from IPython.display import display

from bluepy import Synapse, Cell, Circuit

print("We will plot golden aspect ratios: ", GOLDEN)
#+end_src

** Connsense modules
We have run ~connsense-CRAP~ for the SSCx dissemination variant /Bio-M/, extracting data that we will use to compute the factology. Here is a list of workspaces we will need to generate factsheets.
#+name: notebook-modules
#+begin_src jupyter-python
from connsense.pipeline import pipeline
from connsense.pipeline.parallelization import parallelization as prl
from connsense.pipeline.store import store as tap_store #prod version
from connsense.develop import topotap as topotap_store #develop version
#+end_src
** Connsense workspace
We will load circuit data and compute analyses on it. To read and write we need paths. We can choose from a real circuit.
#+name: notebook-workspaces
#+begin_src jupyter-python
ROOTSPACE = Path("/")
PROJSPACE = ROOTSPACE / "gpfs/bbp.cscs.ch/project/proj83"
CONNSPACE = PROJSPACE / "home/sood" / "topological-analysis-subvolumes/test/v2" / "test"
EXTRACTSPC = CONNSPACE.parent / "extract-2"
#+end_src
** Tap store
While test-developing it will be good to have direct access to the ~connsense-TAP-store~ we will use.
#+name: notebook-connsense-tap
#+begin_src jupyter-python
# %% [markdown]
"""
For our experiments, we will need a circuit, an object to run / investigate the pipeline, and another to load / investigate the computated data.
"""
topaz = pipeline.TopologicalAnalysis(CONNSPACE/"pipeline.yaml", CONNSPACE/"runtime.yaml")
tap = tap_store.HDFStore(topaz._config)
print("Available analyses: ")
#+end_src
As of <2022-10-18 Tue> we are developing a fresh interface for ~connsense-TAP~ that will be used for accessing ~connsense-TAP~ data. The current implementation will continue to be used internally by ~connsense-TAP-parallelization~, and eventually absorbed into ~TopologicalAnalysisPipeline~.
#+name: notebook-connsense-topotap
#+begin_src jupyter-python
# %% [markdown]
"""Load a connsense-TAP to analyze topology of a circuit
"""
# %% [code]

from connsense.develop import (topotap as topotap_store, parallelization as devprl)
reload(topotap_store)
topotap = topotap_store.HDFStore(CONNSPACE/"pipeline.yaml")
print("Available analyses: ")
pprint(topotap.analyses)
#+end_src
#+RESULTS: notebook-connsense-topotap
: Available analyses:
: {'connectivity': {'model-params-dd2': <connsense.develop.topotap.TapDataset object at 0x7ffdf8afecd0>,
:                   'simplex-counts': <connsense.develop.topotap.TapDataset object at 0x7ffdf89613a0>}}
** Extract small subtargets
We have gids for each subtarget that we can obtain,
#+name: noteook-connsense-extract
#+begin_src jupyter-python
subtarget_gids = topotap.pour_dataset("define-subtargets", "flatmap-columns/data") #gids") use
subtarget_sizes = subtarget_gids.apply(len)
subtarget_sizes
#+end_src

Let us take everything below a size of 5000
#+begin_src jupyter-python
subtargets_to_extract = subtarget_sizes.index[subtarget_sizes < 5000].get_level_values("subtarget_id")
print("Number < 5000", len(extract_subtargets))
#+end_src

#+RESULTS:
: Number < 5000 48

that we can use to define the extracted subtargets. There are three datasets associated with subtargets.
#+begin_src jupyter-python
subtarget_names = topotap.pour_dataset("define-subtargets", "flatmap-columns/name")
extract_names = subtarget_names.loc[subtargets_to_extract]
extract_gids = subtarget_gids.loc[subtargets_to_extract]
extract_info = topotap.subtargets.loc[subtargets_to_extract]
display(extract_info)
display(extract_gids)
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
             subtarget  flat_i  flat_j        flat_x  flat_y
subtarget_id
1               R18;C0     -27      27  3.802528e-13  6210.0
2               R19;C0     -28      29  1.991858e+02  6555.0
57              R19;C5     -23      34  2.191044e+03  6555.0
58               R1;C0      -1       2  1.991858e+02   345.0
71               R0;C3       3       3  1.195115e+03     0.0
93              R19;C6     -22      35  2.589416e+03  6555.0
113             R14;C7     -14      28  2.788602e+03  4830.0
122             R15;C7     -15      30  2.987788e+03  5175.0
123             R19;C7     -21      36  2.987788e+03  6555.0
130             R16;C8     -16      32  3.186973e+03  5520.0
136              R0;C7       7       7  2.788602e+03     0.0
139             R11;C7      -9      24  2.987788e+03  3795.0
140             R17;C8     -17      34  3.386159e+03  5865.0
148             R18;C9     -18      36  3.585345e+03  6210.0
149             R19;C8     -20      37  3.386159e+03  6555.0
156             R10;C8      -7      23  3.186973e+03  3450.0
159              R0;C8       8       8  3.186973e+03     0.0
181             R8;C10      -2      22  3.983717e+03  2760.0
186             R3;C10       6      15  4.182903e+03  1035.0
189            R10;C12      -3      27  4.780460e+03  3450.0
193             R8;C11      -1      23  4.382089e+03  2760.0
195            R12;C12      -6      30  4.780460e+03  4140.0
196             R8;C12       0      24  4.780460e+03  2760.0
200             R13;C7     -12      27  2.987788e+03  4485.0
204            R11;C12      -4      29  4.979646e+03  3795.0
205            R12;C13      -5      31  5.178832e+03  4140.0
211            R13;C12      -7      32  4.979646e+03  4485.0
212            R14;C13      -8      34  5.178832e+03  4830.0
215            R13;C13      -6      33  5.378018e+03  4485.0
216             R0;C11      11      11  4.382089e+03     0.0
217             R5;C13       6      21  5.378018e+03  1725.0
218             R7;C14       4      25  5.776389e+03  2415.0
225            R11;C15      -1      32  6.174761e+03  3795.0
226            R14;C14      -7      35  5.577204e+03  4830.0
227             R8;C15       3      27  5.975575e+03  2760.0
228             R2;C11       8      14  4.382089e+03   690.0
229            R12;C16      -2      34  6.373947e+03  4140.0
230            R13;C15      -4      35  6.174761e+03  4485.0
231             R1;C11      10      13  4.581274e+03   345.0
232            R14;C15      -6      36  5.975575e+03  4830.0
233             R0;C12      12      12  4.780460e+03     0.0
234              R9;C8      -5      22  3.386159e+03  3105.0
235            R15;C14      -8      37  5.776389e+03  5175.0
236             R4;C12       6      18  4.780460e+03  1380.0
237             R9;C15       2      29  6.174761e+03  3105.0
238            R15;C13      -9      36  5.378018e+03  5175.0
239             R3;C11       7      16  4.581274e+03  1035.0
240            R15;C15      -7      38  6.174761e+03  5175.0
#+end_example
#+begin_example
subtarget_id  circuit_id
1             0             [1636113, 996599, 3524820, 14591, 4075085, 141...
2             0             [1266252, 366210, 3411327, 4030175, 2328537, 3...
57            0             [1101211, 2018531, 1028613, 3799927, 1101208, ...
58            0             [215573, 1402361, 1768805, 3677280, 1174919, 3...
71            0             [3388343, 600993, 3961385, 2680002, 2156742, 2...
93            0             [1331416, 703677, 2471943, 1901147, 4164719, 3...
113           0             [1438965, 726859, 3033401, 1248961, 2143513, 8...
122           0             [1599355, 3255779, 3320862, 1420298, 2139662, ...
123           0             [2029595, 672897, 3281015, 3850243, 3453445, 6...
130           0             [3604641, 1007762, 915999, 1722022, 1107177, 1...
136           0             [1669658, 1215301, 1576560, 2144297, 3157284, ...
139           0             [1917602, 1076033, 899933, 2007417, 1237071, 3...
140           0             [1452168, 1943969, 521933, 619172, 3076583, 32...
148           0             [786542, 1914950, 1569489, 2706432, 3947619, 9...
149           0             [2886945, 2981820, 2533665, 2418322, 3345536, ...
156           0             [2027335, 2140677, 1981834, 1668897, 763464, 2...
159           0             [2782221, 4217551, 1195432, 2960433, 3335007, ...
181           0             [2753113, 2959883, 1484253, 3811261, 1843970, ...
186           0             [1030593, 839524, 2494450, 202186, 815469, 318...
189           0             [833518, 2083123, 1668673, 2094171, 1040063, 1...
193           0                                            [1012855, 1272301]
195           0             [1012416, 1936777, 882083, 1745429, 1433237, 1...
196           0             [2356102, 2369177, 1151607, 3207272, 3938680, ...
200           0                                              [653242, 687610]
204           0             [1196649, 888037, 1360779, 1022158, 2035792, 1...
205           0             [1205543, 1176196, 1774839, 2015050, 1364632, ...
211           0                           [930019, 1434936, 1763177, 2151130]
212           0             [2129137, 1840061, 1928000, 1942617, 966777, 1...
215           0             [1308008, 1496173, 1464634, 2194140, 1034037, ...
216           0             [3408364, 3145681, 3953930, 325523, 3143500, 2...
217           0             [3629373, 1993272, 92014, 3613841, 209440, 368...
218           0             [3552622, 1981658, 567749, 3058573, 1018407, 1...
225           0             [3028865, 1418509, 1425477, 3028803, 717127, 2...
226           0             [4096837, 2697489, 3249118, 110587, 4200169, 3...
227           0             [4006995, 2503014, 1156933, 4015401, 2610205, ...
228           0             [3165401, 3108200, 3212141, 3101038, 2467433, ...
229           0             [91590, 1382294, 2920671, 2309560, 486626, 384...
230           0             [463147, 2694306, 2288539, 2335832, 4179316, 3...
231           0             [3053387, 3261361, 3260675, 175323, 3253018, 6...
232           0             [296143, 3478705, 166027, 2306898, 3394905, 49...
233           0             [3242725, 2921720, 3119775, 3405658, 2945966, ...
234           0                                                      [655474]
235           0             [3006421, 400107, 129972, 3006579, 3214201, 10...
236           0             [3309209, 3274179, 2991788, 3349409, 3333216, ...
237           0             [3355052, 3727664, 3262333, 2671785, 3257184, ...
238           0             [682556, 3059490, 677400, 3139700, 3180953, 30...
239           0                                                      [651271]
240           0                                                            []
Name: gids, dtype: object
#+end_example
:END:

We can just write them to the workplace
#+begin_src jupyter-python
extract_info.to_hdf(EXTRACTSPC/"connsense.h5", key="subtargets/flatmap-columns/info")
extract_names.to_hdf(EXTRACTSPC/"connsense.h5", key="subtargets/flatmap-columns/name")
extract_gids.to_hdf(EXTRACTSPC/"connsense.h5", key="subtargets/flatmap-columns/data")

#+end_src

** A notebook template to explore and develop

#+begin_src jupyter-python :tangle develop_parallelization.py :noweb yes :comments no :padline yes
<<notebook-init>>

<<notebook-modules>>

<<notebook-workspaces>>

<<notebook-connsense-tap>>

<<notebook-connsense-topotap>>
#+end_src

#+RESULTS:
#+begin_example
 2022-11-02 17:04:56,132: Configure slurm for create-index
 2022-11-02 17:04:56,133: No runtime configured for computation type create-index
 2022-11-02 17:04:56,133: Configure slurm for define-subtargets
 2022-11-02 17:04:56,134: Configure slurm for extract-node-populations
 2022-11-02 17:04:56,134: Configure slurm for extract-edge-populations
 2022-11-02 17:04:56,135: Configure slurm for analyze-connectivity
We will plot golden aspect ratios:  1.618033988749895
Available analyses:
Available analyses:
{'connectivity': {'model-params-dd2': <connsense.develop.topotap.TapDataset object at 0x7fff5c190e80>,
                  'simplex-counts': <connsense.develop.topotap.TapDataset object at 0x7fff5c190d30>}}
#+end_example


#+RESULTS:


* <2022-11-25 Fri> 1000 Restructure repositories
